"use strict";(self.webpackChunkarrower_org=self.webpackChunkarrower_org||[]).push([[439],{3591:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var s=t(5893),i=t(1151);const o={sidebar_position:1},r="Jobs",a={id:"basics/jobs/index",title:"Jobs",description:"For everything that has to run in the background",source:"@site/docs/basics/03-jobs/index.md",sourceDirName:"basics/03-jobs",slug:"/basics/jobs/",permalink:"/docs/basics/jobs/",draft:!1,unlisted:!1,editUrl:"https://github.com/go-arrower/arrower.org/tree/master/docs/basics/03-jobs/index.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Views",permalink:"/docs/basics/views/"},next:{title:"Repeating Tasks",permalink:"/docs/basics/repeating-tasks/"}},l={},c=[{value:"Interface and Characteristics",id:"interface-and-characteristics",level:2},{value:"Enqueue Jobs",id:"enqueue-jobs",level:2},{value:"Scheduling Jobs",id:"scheduling-jobs",level:3},{value:"Prioritising Jobs",id:"prioritising-jobs",level:3},{value:"Inserting Jobs into the Database",id:"inserting-jobs-into-the-database",level:3},{value:"Process Jobs",id:"process-jobs",level:2},{value:"Different Queues",id:"different-queues",level:2},{value:"Testing",id:"testing",level:2},{value:"UI &amp; Observability",id:"ui--observability",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"jobs",children:"Jobs"}),"\n",(0,s.jsx)(n.p,{children:"For everything that has to run in the background\n(asynchronous): jobs, tasks, long-running operations, bulk processing,\ncleanups, notifications, ect.\nIt is focused on developer convenience and creating a DDD and Clean Architecture oriented application\nthat is easy to understand, extend, and maintain. There is no need to mix serialisation logic within your domain layer."}),"\n",(0,s.jsx)(n.p,{children:"Works with Postgres to keep the stack of the application small."}),"\n",(0,s.jsxs)(n.admonition,{type:"caution",children:[(0,s.jsx)(n.mdxAdmonitionTitle,{}),(0,s.jsx)(n.p,{children:"The use of PostgreSQL will have very serious implications on what is realistically possible with this setup\nin terms of scale but probably totally fine for a small to medium-sized app."})]}),"\n",(0,s.jsx)(n.h2,{id:"interface-and-characteristics",children:"Interface and Characteristics"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"type Enqueuer interface {\n\tEnqueue(context.Context, Job, ...JobOpt) error\n}\n\ntype Queue interface {\n\tEnqueuer\n\n\tRegisterJobFunc(func (ctx context.Context, job Job) error) error\n\tShutdown(context.Context) error\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Key characteristics"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Exactly once guarantee for jobs (no need to deal with distributed transactions or 2X protocolls)"}),"\n",(0,s.jsx)(n.li,{children:"Scheduling of jobs"}),"\n",(0,s.jsx)(n.li,{children:"Automatic retries on job or worker failure"}),"\n",(0,s.jsx)(n.li,{children:"Different Queues"}),"\n",(0,s.jsx)(n.li,{children:"Different priorities per queue"}),"\n",(0,s.jsx)(n.li,{children:"Visibility into the queues and jobs statuses"}),"\n",(0,s.jsx)(n.li,{children:"List current workers per queue"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"enqueue-jobs",children:"Enqueue Jobs"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"var jq jobs.Enqueuer\n\n// enqueue a single job\n_ = jq.Enqueue(ctx, myJob{Payload: 1})\n\n// enqueue multiple jobs\n_ = jq.Enqueue(ctx, []myJob{{Payload: 1}, {Payload: 2}})\n\n// enqueue multiple jobs of different kinds\n_ = jq.Enqueue(ctx, []any{myJob{Payload: 1}, otherJob{}})\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/go-arrower/arrower/blob/master/jobs/jobs.business_test.go",children:"See working example"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["If the ",(0,s.jsx)(n.code,{children:"ctx"})," contains a transaction, it is used to persist the job to the database.\nKeeping your job consistent with your application data."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"scheduling-jobs",children:"Scheduling Jobs"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"_ = jq.Enqueue(ctx, myJob{}, jobs.WithRunAt(time.Now().Add(10*time.Minute)))\n"})}),"\n",(0,s.jsx)(n.h3,{id:"prioritising-jobs",children:"Prioritising Jobs"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"// a lower number means a higher priority\n_ = jq.Enqueue(ctx, myJob{}, jobs.WithPriority(-1))\n"})}),"\n",(0,s.jsx)(n.h3,{id:"inserting-jobs-into-the-database",children:"Inserting Jobs into the Database"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"INSERT INTO arrower.gue_jobs(job_id, created_at, updated_at, run_at, queue, job_type, priority, args)\nVALUES (generate_ulid(), now(), now(), now(),\n        '', 'MyJob', 0,\n        (json_build_object(\n            'jobData', '{}'\n         ) #>> '{}')::BYTEA -- JSON can not be converted to BYTEA: convert to TEXT first\n        );\n"})}),"\n",(0,s.jsx)(n.h2,{id:"process-jobs",children:"Process Jobs"}),"\n",(0,s.jsxs)(n.p,{children:["Each job is processed asynchronously in its own worker go routine.\nTo be able to process jobs it is important to register a ",(0,s.jsx)(n.code,{children:"JobFunc"})," on the appropriate queue."]}),"\n",(0,s.jsxs)(n.p,{children:["The function has to have the signature of ",(0,s.jsx)(n.code,{children:"func(ctx context.Context, job YourJobType) error"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"var jq jobs.Queue\n\n_ = jq.RegisterJobFunc(func(ctx context.Context, job myJob) error {\n\t// process your job here...\n\t\n\treturn nil\n}) \n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Returning an error will reschedule the job with an exponential backoff"}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"ctx"})," contains a transaction the job is running inside, so you can keep all your operations consistent","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"tx, txOk := ctx.Value(postgres.CtxTX).(pgx.Tx)"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["A call to ",(0,s.jsx)(n.code,{children:"RegisterJobFunc"})," does start the worker pool after a certain time. If the worker poll got started already,\nsubsequent calls to ",(0,s.jsx)(n.code,{children:"RegisterJobFunc"})," will shut it down and restart it automatically blocking your call for that time."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"different-queues",children:"Different Queues"}),"\n",(0,s.jsx)(n.p,{children:"Arrower supports multiple job queues, but each queue has to be instantiated. If no explicit queue name is\nset, the default queue is used."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'jq, err := jobs.NewPostgresJobs(alog.NewNoopLogger(), noop.NewMeterProvider(), noop.NewTracerProvider(), pgHandler.PGx,\n    jobs.WithQueue("queueName"), // set the name of the queue you want to run\n)\n'})}),"\n",(0,s.jsx)(n.p,{children:"Each queue can be configured with these optional options."}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Option"}),(0,s.jsx)(n.th,{children:"Default"}),(0,s.jsx)(n.th,{children:"Behaviour"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"WithQueue"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"<empty>"})}),(0,s.jsx)(n.td,{children:"Set the name of the queue"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"WithPollInterval"})}),(0,s.jsx)(n.td,{children:"5 seconds"}),(0,s.jsx)(n.td,{children:"Set the interval to query the database for new jobs."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"WithPoolSize"})}),(0,s.jsx)(n.td,{children:"10"}),(0,s.jsx)(n.td,{children:"Set the amount of workers"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"WithPoolName"})}),(0,s.jsx)(n.td,{children:"a random name"}),(0,s.jsx)(n.td,{children:"Set the a name for this worker pool instance"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"WithWorkerPollStrategy"})}),(0,s.jsx)(n.td,{children:"PriorityPollStrategy"}),(0,s.jsx)(n.td,{children:"Set the  poll strategy"})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:["The queue is instrumented to give you ",(0,s.jsx)(n.a,{href:"./observability",children:"observability"})," out of the box.\nYou'll have logs, metrics, and traces available for you."]}),"\n",(0,s.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,s.jsx)(n.p,{children:"As the Job's handlers are just functions you can test them normally, like you would do anyway."}),"\n",(0,s.jsxs)(n.p,{children:["What is remaining is to ensure the right Jobs get enqueued on the emitting site.\nFor this an in memory implementation of the ",(0,s.jsx)(n.code,{children:"jobs.Queue"})," interface is available, you can use in tests. It comes\nwith some additional methods, to make testing easier:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Custom assertions for the job queue"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"  jq := jobs.NewTestingJobs()\n  jassert := jq.Assert(t)\n\n  // asserts the queue is empty\n  jassert.Empty()\n\n  _ = jq.Enqueue(ctx, myJob{})\n\n  // asserts the queue is not empty\n  jassert.NotEmpty()\n\n  // asserts the queue has exactly one Job of type `myJob`\n  jassert.Queued(myJob{}, 1)\n\n  // asserts the queue has 1 Job enqueued\n  jassert.QueuedTotal(1)\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:["Custom test helpers beyond the ",(0,s.jsx)(n.code,{children:"jobs.Queue"})," interface"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'  jq := jobs.NewTestingJobs()\n\n  // get a Job without processing it, to assert Job details.\n  job := queue.GetFirstOf(myJob{}).(myJob)\n  assert.Equal(t, "myName", job.Name)\n\n  // resets the queue to be empty\n  jq.Reset() \n'})}),"\n",(0,s.jsx)(n.h2,{id:"ui--observability",children:"UI & Observability"}),"\n",(0,s.jsxs)(n.p,{children:["See ",(0,s.jsx)(n.a,{href:"/docs/basics/observability",children:"Observability for more details"})]}),"\n",(0,s.jsx)("img",{src:t(7866).Z}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Jobs integrate with the observability setup of arrower"}),"\n",(0,s.jsx)(n.li,{children:"The originating span is persisted and referenced in each Job run"}),"\n",(0,s.jsx)(n.li,{children:"Failing Job runs are marked and retried automatically"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},7866:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/queue-otel-tracing-413652944366e601807e6c64be9c2c2d.png"},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>r});var s=t(7294);const i={},o=s.createContext(i);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);