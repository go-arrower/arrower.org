"use strict";(self.webpackChunkarrower_org=self.webpackChunkarrower_org||[]).push([[859],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),m=o,g=c["".concat(l,".").concat(m)]||c[m]||d[m]||a;return n?r.createElement(g,i(i({ref:t},u),{},{components:n})):r.createElement(g,i({ref:t},u))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4159:(e,t,n)=>{n.r(t),n.d(t,{Pyramid:()=>u,assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:2},i="Testing",s={unversionedId:"basics/testing/index",id:"basics/testing/index",title:"Testing",description:"Testing Pyramid",source:"@site/docs/basics/05-testing/index.md",sourceDirName:"basics/05-testing",slug:"/basics/testing/",permalink:"/docs/basics/testing/",draft:!1,editUrl:"https://github.com/go-arrower/arrower.org/tree/master/docs/basics/05-testing/index.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Repeating Tasks",permalink:"/docs/basics/repeating-tasks/"},next:{title:"Observability",permalink:"/docs/basics/observability/"}},l={},p=[{value:"Testing Pyramid",id:"testing-pyramid",level:3},{value:"Unit Testing With Repository Pattern",id:"unit-testing-with-repository-pattern",level:2},{value:"Extending the Repository",id:"extending-the-repository",level:3},{value:"Overwriting a Method",id:"overwriting-a-method",level:3},{value:"Integration Testing",id:"integration-testing",level:2},{value:"Docker Images for Integration Testing",id:"docker-images-for-integration-testing",level:3}],u=()=>(0,o.kt)("div",null,(0,o.kt)("img",{src:n(7151).Z,alt:"schema of testing pyramid",style:{width:"60%",float:"right"}}),(0,o.kt)("span",null,"Arrower is using the following terminology, and the picture at the right is only a sketch of the dynamics of the testing pyramid.",(0,o.kt)("br",null),(0,o.kt)("br",null),(0,o.kt)("ul",null,(0,o.kt)("li",null,"Manual"),(0,o.kt)("li",null,"\ud83d\udca4 UI"),(0,o.kt)("li",null,"\ud83d\udca4 E2E"),(0,o.kt)("li",null,"\u23f3 Integration"),(0,o.kt)("li",null,"\u2705 Unit"))),(0,o.kt)("div",{style:{clear:"both"}})),c={toc:p,Pyramid:u},d="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"testing"},"Testing"),(0,o.kt)("h3",{id:"testing-pyramid"},"Testing Pyramid"),(0,o.kt)("p",null,"It's important to understand that this is just one view.\nYou might find parts of it useful but also have your own experience, fondness, and approach to testing.\nThat is fine!\nArrower wants to support, so you can do as you like."),(0,o.kt)("p",null,"The style, completeness, and amount of test cases might also depend on\nwhich phase your project is in at any given point,\nwhile prototyping you will want to employ a different testing strategy than when you're maintaining an application."),(0,o.kt)(u,{mdxType:"Pyramid"}),(0,o.kt)("h2",{id:"unit-testing-with-repository-pattern"},"Unit Testing With Repository Pattern"),(0,o.kt)("p",null,"Unit tests come in many forms. Arrower provides you with a set of helpers that make your life easier."),(0,o.kt)("p",null,"If you're using the repository pattern it is cumbersome to always implement an in memory copy of the repository.\nUse this helper to get a repository that comes with a lot of often used methods out of the box:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var repo YourRepositoryType = tests.NewMemoryRepository[Entity, EntityID]()\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="memory.repository.go"',title:'"memory.repository.go"'},"type Repository[E any, ID id] interface {\n    NextID(context.Context) (ID, error)\n    \n    Create(context.Context, E) error\n    Read(context.Context, ID) (E, error)\n    Update(context.Context, E) error\n    Delete(context.Context, E) error\n    \n    All(context.Context) ([]E, error)\n    AllByIDs(context.Context, []ID) ([]E, error)\n    FindAll(ctx context.Context) ([]E, error)\n    FindByID(context.Context, ID) (E, error)\n    FindByIDs(context.Context, []ID) (E, error)\n    Exists(context.Context, ID) (bool, error)\n    ExistsByID(context.Context, ID) (bool, error)\n    ExistAll(context.Context, []ID) (bool, error)\n    ExistByIDs(context.Context, []ID) (bool, error)\n    Contains(context.Context, ID) (bool, error)\n    ContainsID(context.Context, ID) (bool, error)\n    ContainsIDs(context.Context, []ID) (bool, error)\n    ContainsAll(context.Context, []ID) (bool, error)\n    \n    Save(context.Context, E) error\n    SaveAll(context.Context, []E) error\n    UpdateAll(context.Context, []E) error\n    Add(context.Context, E) error\n    AddAll(context.Context, []E) error\n    \n    Count(context.Context) (int, error)\n    Length(context.Context) (int, error)\n    Empty(context.Context) (bool, error)\n    IsEmpty(context.Context) (bool, error)\n    \n    DeleteByID(context.Context, ID) error\n    DeleteByIDs(context.Context, []ID) error\n    DeleteAll(context.Context) error\n    Clear(context.Context) error\n}\n")),(0,o.kt)("p",null,"It is implicitly assumed that the entity has a field named ",(0,o.kt)("inlineCode",{parentName:"p"},"ID")," with an underlying type of ",(0,o.kt)("inlineCode",{parentName:"p"},"string")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"int"),".\nThat field will be used as the primary key.\nYou can change the field name:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'repo := tests.NewMemoryRepository[E, I](\n    tests.WithIDField("YourPKField"),\n)\n')),(0,o.kt)("h3",{id:"extending-the-repository"},"Extending the Repository"),(0,o.kt)("p",null,"If you have methods that are not supported out of the box,\nyou can embed the repository and implement your missing methods.\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/go-arrower/arrower/blob/master/tests/memory.example_extend_test.go"},"See full example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="memory.example_extend_test.go"',title:'"memory.example_extend_test.go"'},"type UserMemoryRepository struct {\n    *tests.MemoryRepository[User, UserID]\n}\n\n// FindByLogin implements a custom method, that is not supported by the tests.Repository out of the box.\nfunc (repo *UserMemoryRepository) FindByLogin(ctx context.Context, login string) (User, error) {\n    all, _ := repo.All(ctx)\n    \n    for _, u := range all {\n        if u.Login == login {\n            return u, nil\n        }\n    }\n    \n    return User{}, tests.ErrNotFound\n}\n")),(0,o.kt)("h3",{id:"overwriting-a-method"},"Overwriting a Method"),(0,o.kt)("p",null,"You can even fine tune the behaviour of an existing method if your requirements demand it.\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/go-arrower/arrower/blob/master/tests/memory.example_overwrite_test.go"},"See full example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="memory.example_overwrite_test.go"',title:'"memory.example_overwrite_test.go"'},"type EntityMemoryRepository struct {\n    *tests.MemoryRepository[Entity, EntityID]\n}\n\n// Count overwrites the existing Count method with your own implementation.\nfunc (repo *EntityMemoryRepository) Count(_ context.Context) (int, error) {\n    return -1, nil\n}\n")),(0,o.kt)("h2",{id:"integration-testing"},"Integration Testing"),(0,o.kt)("p",null,"Sometimes you just don't want to test against an in memory implementation and need to see if your application behaves\ncorrectly against the real database."),(0,o.kt)("p",null,"This pattern spins up a postgres database inside a docker container and removes the container after the test has\nfinished automatically.\nThe ",(0,o.kt)("inlineCode",{parentName:"p"},"NewTestDatabase")," method will ensure you can safely run all tests in parallel by:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Creating a new randomly named database for each test case"),(0,o.kt)("li",{parentName:"ul"},"Performing schema migration"),(0,o.kt)("li",{parentName:"ul"},"Seeding the database with test data")),(0,o.kt)("p",null,"The testdata is seeded with the project ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/go-testfixtures/testfixtures"},"testfixtures"),"\nand if an file ",(0,o.kt)("inlineCode",{parentName:"p"},"testdata/fixtures/_common.yaml")," exists it is automatically loaded. For additional data per test case\ntake a look at ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/go-testfixtures/testfixtures#-single-file-on-multiple-tables"},"multiple tables in one file")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'//go:build integration\n\npackage yourpackage_test\n\nvar pgHandler *tests.PostgresDocker\n\nfunc TestMain(m *testing.M) {\n    pgHandler = tests.GetPostgresDockerForIntegrationTestingInstance()\n\n    //\n    // Run tests\n    code := m.Run()\n\n    pgHandler.Cleanup()\n    os.Exit(code)\n}\n\nfunc TestSomething(t *testing.T) {\n    t.Parallel()\n\n    pg := pgHandler.NewTestDatabase()\n\n    // use pg to initialise your test dependencies like a postgres repository \n}\n\nfunc TestSomethingOther(t *testing.T) {\n    t.Parallel()\n\n    // load multiple additional test fixture files to seed the database\n    pg := pgHandler.NewTestDatabase([]string{\n        "testdata/fixtures/something-other-user.yaml",\n        "testdata/fixtures/something-other-posts.yaml",\n    })\n    \n    _ = pg.PGx() // direct access to the pgx connection pool \n}\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"PrepareDatabase")," method is similar to ",(0,o.kt)("inlineCode",{parentName:"p"},"NewTestDatabase")," but does not create a new database\nbut cleans the existing database! "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"All data is truncated"),(0,o.kt)("li",{parentName:"ul"},"It cannot be used in parallel")),(0,o.kt)("p",null,"If you depend on other services for your testing use the ",(0,o.kt)("inlineCode",{parentName:"p"},"tests.StartDockerContainer")," helper to start any service\ninside a docker container.\nCheck out the ",(0,o.kt)("inlineCode",{parentName:"p"},"tests.GetPostgresDockerForIntegrationTestingInstance")," to see it in action for the testing against a postgres\ndatabase as shown above."),(0,o.kt)("h3",{id:"docker-images-for-integration-testing"},"Docker Images for Integration Testing"),(0,o.kt)("p",null,"Arrower ships all images you would need to operate and test a setup.\nSee ",(0,o.kt)("a",{parentName:"p",href:"./repeating-tasks#postgres-image-with-pg_cron"},"Tasks")," on how to use the postgres image with a\npreinstalled ",(0,o.kt)("inlineCode",{parentName:"p"},"pg_cron")," extension already"))}m.isMDXComponent=!0},7151:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/pyramid-fb70a76771013041e8425615d6b4d2d2.png"}}]);