"use strict";(self.webpackChunkarrower_org=self.webpackChunkarrower_org||[]).push([[6614],{9328:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>g,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var s=t(5893),o=t(1151);const r={sidebar_position:1,slug:"logging",description:"Log to see what is going on in your application."},i="Logging",l={id:"basics/observability/logging",title:"Logging",description:"Log to see what is going on in your application.",source:"@site/docs/basics/07-observability/logging.md",sourceDirName:"basics/07-observability",slug:"/basics/observability/logging",permalink:"/docs/basics/observability/logging",draft:!1,unlisted:!1,editUrl:"https://github.com/go-arrower/arrower.org/tree/master/docs/basics/07-observability/logging.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,slug:"logging",description:"Log to see what is going on in your application."},sidebar:"tutorialSidebar",previous:{title:"Observability",permalink:"/docs/basics/observability/"},next:{title:"Metrics",permalink:"/docs/basics/observability/metrics"}},a={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Available Handlers",id:"available-handlers",level:3},{value:"Runtime Configuration",id:"runtime-configuration",level:2},{value:"Change The Log Level",id:"change-the-log-level",level:3},{value:"Settings",id:"settings",level:3},{value:"Writing Log Messages",id:"writing-log-messages",level:2},{value:"<code>slog</code> Logger Interface",id:"slog-logger-interface",level:3},{value:"<code>alog</code> Logger Interface",id:"alog-logger-interface",level:3},{value:"Log Level",id:"log-level",level:3},{value:"Request Specific Attributes",id:"request-specific-attributes",level:2},{value:"Testing",id:"testing",level:2},{value:"Correlate With Tracing",id:"correlate-with-tracing",level:2}];function c(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"logging",children:"Logging"}),"\n",(0,s.jsxs)(n.p,{children:["Arrower recommends using ",(0,s.jsx)(n.a,{href:"https://pkg.go.dev/log/slog#Logger",children:(0,s.jsx)(n.code,{children:"slog.Logger"})}),"\nin your application.",(0,s.jsx)(n.br,{}),"\n","It comes with its own implementation of\n",(0,s.jsx)(n.a,{href:"https://pkg.go.dev/log/slog#Handler",children:(0,s.jsx)(n.code,{children:"slog.Handler"})}),",\nto add interesting extra functionalities."]}),"\n",(0,s.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"logger := alog.New()\nlogger := alog.NewDevelopment(pgx)\nlogger := alog.Test(t)\n"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Environment"}),(0,s.jsx)(n.th,{children:"Constructor"}),(0,s.jsx)(n.th,{children:"Key Features"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"production"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"New"})}),(0,s.jsx)(n.td,{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Defaults to level ",(0,s.jsx)(n.code,{children:"INFO"})]}),(0,s.jsx)("li",{children:"Writes to Stderr"}),(0,s.jsx)("li",{children:"Formats in JSON"})]})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"development"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"NewDevelopment"})}),(0,s.jsx)(n.td,{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Defaults to level ",(0,s.jsx)(n.code,{children:"DEBUG"})]}),(0,s.jsx)("li",{children:"Writes to Stderr"}),(0,s.jsx)("li",{children:"Sends logs to local loki & postgres, if available"})]})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"testing"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Test"})}),(0,s.jsx)(n.td,{children:(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:["Defaults to level ",(0,s.jsx)(n.code,{children:"DEBUG"})]}),(0,s.jsx)("li",{children:"Writes to buffer"}),(0,s.jsx)("li",{children:"Semantic assertions for the log output"})]})})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"available-handlers",children:"Available Handlers"}),"\n",(0,s.jsx)(n.p,{children:"A logger can take one or multiple handlers that it writes to simultaneously.\nYou can bring and use your own handler(s).\nAny slog Handlers will work.\nThis gives you more control over your logging needs, compared to one of the default loggers from above."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"logger := alog.New(\n    alog.WithHandler(h0),\n    alog.WithHandler(h1),\n    alog.WithLevel(slog.LevelDebug),\n)\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(n.p,{children:"The level of a given handler is ignored and the level of the logger is used\nfor all handlers instead."})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Name"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"slog.NewTextHandler"}),(0,s.jsx)(n.td,{children:"The standard libraries handler"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"slog.NewJSONHandler"}),(0,s.jsx)(n.td,{children:"The standard libraries handler"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"slog.DiscardHandler"}),(0,s.jsx)(n.td,{children:"The standard libraries handler"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"alog.NewLokiHandler"}),(0,s.jsxs)(n.td,{children:["Use this for local development only!",(0,s.jsx)("br",{})," Sends all logs to a loki instance"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"alog.NewPostgresHandler"}),(0,s.jsxs)(n.td,{children:["Use this for local development only!",(0,s.jsx)("br",{})," Sends all logs to postgres"]})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"runtime-configuration",children:"Runtime Configuration"}),"\n",(0,s.jsx)(n.p,{children:"To conveniently debug issues,\nthe logger supports changing some properties at runtime."}),"\n",(0,s.jsx)(n.h3,{id:"change-the-log-level",children:"Change The Log Level"}),"\n",(0,s.jsx)(n.p,{children:"To change the log level of a logger at runtime while it is in use:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"alog.Unwrap(logger).SetLevel(slog.LevelDebug)\n"})}),"\n",(0,s.jsx)(n.p,{children:"The log level will be changed for all handlers,\nindependent of their specific configuration.\nChanging the log level at runtime doesn't require the creation\nof a new logger and your existing dependencies stay valid."}),"\n",(0,s.jsx)(n.h3,{id:"settings",children:"Settings"}),"\n",(0,s.jsxs)(n.p,{children:["To influence the logger,\neven if multiple instances run on different machines,\nsettings can be used to dynamically change behaviour at runtime.",(0,s.jsx)(n.br,{}),"\n","Using the e.g. the postgres settings store,\nchanges in settings are reflected immediately for subsequent requests."]}),"\n",(0,s.jsx)(n.p,{children:"If used/enabled, it impacts the performance of the logger!"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'// SettingLogLevel // sets the log level across loggers\n// SettingLogUsers // shows all logs for the given users, independent of the log level\n\n// dependency setup\nsettings := setting.NewInMemorySettings()\n\nlogger := alog.New(\n    alog.WithLevel(slog.LevelInfo),\n    alog.WithSettings(settings),\n)\n\n// change setting at run time\nsettings.Save(ctx, alog.SettingLogUsers, setting.NewValue([]string{userID}))\n\n// http request path\nctx := context.WithValue(ctx, auth.CtxUserID, userID)\nlogger.DebugContext(ctx, "debug") // appears, although the logger\'s level is INFO\n'})}),"\n",(0,s.jsx)(n.h2,{id:"writing-log-messages",children:"Writing Log Messages"}),"\n",(0,s.jsxs)(n.p,{children:["The Go community has struggled for some time to find good logger interfaces.\nCheck out Dave Cheney's post ",(0,s.jsx)(n.a,{href:"https://dave.cheney.net/2015/11/05/lets-talk-about-logging",children:"Let's talk about logging"}),"\nwhere he makes a compelling argument to only log two things:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Things that developers care about when they are developing or debugging software. => ",(0,s.jsx)(n.code,{children:"DEBUG"})]}),"\n",(0,s.jsxs)(n.li,{children:["Things that users care about when using your software. => ",(0,s.jsx)(n.code,{children:"INFO"})]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"slog-logger-interface",children:[(0,s.jsx)(n.code,{children:"slog"})," Logger Interface"]}),"\n",(0,s.jsxs)(n.p,{children:["Arrower returns always an ",(0,s.jsx)(n.code,{children:"slog.Logger"})," for logging.\nSo you can use the known API, and all the available methods\nthat Go is offering."]}),"\n",(0,s.jsxs)(n.p,{children:["One important consideration though:\nIt is recommended to give the context to the methods,\nso use ",(0,s.jsx)(n.code,{children:"Log()"}),", ",(0,s.jsx)(n.code,{children:"LogAttrs()"}),", or ",(0,s.jsx)(n.code,{children:"InfoCtx()"})," over ",(0,s.jsx)(n.code,{children:"Info()"}),".\nThe context carries information to ",(0,s.jsx)(n.a,{href:"#correlate-with-tracing",children:"correlate the logs with traces"}),"."]}),"\n",(0,s.jsxs)(n.h3,{id:"alog-logger-interface",children:[(0,s.jsx)(n.code,{children:"alog"})," Logger Interface"]}),"\n",(0,s.jsxs)(n.p,{children:["Arrower recommends you the use the ",(0,s.jsx)(n.code,{children:"slog.Logger"})," interface.\nYou probably don't want to bind your code to our logger interface."]}),"\n",(0,s.jsxs)(n.p,{children:["That said, the project itself uses a more restricted subset of the ",(0,s.jsx)(n.code,{children:"slog"})," interface, that:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"encourages the use of methods taking context.Context, so that tracing information can be correlated"}),"\n",(0,s.jsxs)(n.li,{children:["encourages the use of the levels ",(0,s.jsx)(n.code,{children:"DEBUG"})," and ",(0,s.jsx)(n.code,{children:"INFO"}),", without preventing the others"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"type Logger interface {\n    Log(ctx context.Context, level slog.Level, msg string, args ...any)\n    LogAttrs(ctx context.Context, level slog.Level, msg string, attrs ...slog.Attr)\n    DebugCtx(ctx context.Context, msg string, args ...any)\n    InfoCtx(ctx context.Context, msg string, args ...any)\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"log-level",children:"Log Level"}),"\n",(0,s.jsx)(n.p,{children:"Arrower works with the standard slog levels.\nThat also means you can define your own log levels.\nArrower uses the following two log levels internally, leaving you some space\nto define your own in between, if desired."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"const (\n    // LevelInfo is used to see what is going on inside Arrower.\n    LevelInfo = slog.Level(-8)\n    // LevelDebug is used by Arrower developers, if you really want to know what is going on.\n    LevelDebug = slog.Level(-12)\n)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"request-specific-attributes",children:"Request Specific Attributes"}),"\n",(0,s.jsx)(n.p,{children:"Sometimes it is necessary to log request-specific information,\nbut the logger is usually injected as a dependency, so this is difficult.\nYou could put a logger into the context and hand it down to the\nplace where it is used, or you add the attributes as request scoped\ndata only."}),"\n",(0,s.jsxs)(n.p,{children:["All attributes added to the context are logged automatically\nby the Arrower logger, provided you use a\n",(0,s.jsx)(n.a,{href:"#alog-logger-interface",children:"context aware method"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'ctx = alog.AddAttr(ctx, slog.String("my", "attr"))\nctx = alog.AddAttrs(ctx, slog.String("my", "attr"), slog.String("other", "attr"))\n'})}),"\n",(0,s.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,s.jsx)(n.p,{children:"To ensure what got logged during testing time is easy.\nalog comes with a set of semantic assertions and fails your test cases."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"func TestMyService(t *testing.T) {\n    logger := alog.Test(t)\n\n    // myService(logger)\n    // myService.MethodUnderTest()\n\n    logger.NotEmpty()        // assert the logger is not empty\n    t.Log(logger.String())   // print all log lines \n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"correlate-with-tracing",children:"Correlate With Tracing"}),"\n",(0,s.jsxs)(n.p,{children:['Your web applications might span multiple machines.\nTo make it easy to trace down a "request",\narrower adds the ',(0,s.jsx)(n.code,{children:"traceID"})," and ",(0,s.jsx)(n.code,{children:"spanID"}),"\nautomatically to each output, if present in the context."]}),"\n",(0,s.jsx)(n.admonition,{title:"Improve Docs",type:"note",children:(0,s.jsx)(n.p,{children:"Screenshot how logs have IDs"})}),"\n",(0,s.jsx)(n.p,{children:"In return each log is also recorded as an event in the span, to make it easier to debug\npotentially issues."}),"\n",(0,s.jsx)(n.admonition,{title:"Improve Docs",type:"note",children:(0,s.jsx)(n.p,{children:"Screenshot how traces have logs with all attributes"})}),"\n",(0,s.jsxs)(n.p,{children:["For more on tracing, see ",(0,s.jsx)(n.a,{href:"traces",children:"traces"}),"."]})]})}function g(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>i});var s=t(7294);const o={},r=s.createContext(o);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);