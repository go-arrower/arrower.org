"use strict";(self.webpackChunkarrower_org=self.webpackChunkarrower_org||[]).push([[918],{8380:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var n=s(5893),i=s(1151);const o={title:"Methodik",hide_table_of_contents:!1,toc_min_heading_level:2,toc_max_heading_level:6},r="Methodik",l={type:"mdx",permalink:"/methodik",source:"@site/src/pages/methodik.md",title:"Methodik",description:"Recommendations. It's required you think for yourself.",frontMatter:{title:"Methodik",hide_table_of_contents:!1,toc_min_heading_level:2,toc_max_heading_level:6},unlisted:!1},a={},d=[{value:"Testing",id:"testing",level:2},{value:"Methods and Practices",id:"methods-and-practices",level:3},{value:"Use Go Testing Toolchain",id:"use-go-testing-toolchain",level:4},{value:"Definition of Unit Under Test",id:"definition-of-unit-under-test",level:4},{value:"Blackbox Testing",id:"blackbox-testing",level:4},{value:"Nest Cases With Subtests",id:"nest-cases-with-subtests",level:4},{value:"Table Driven Tests / Parameterised Tests",id:"table-driven-tests--parameterised-tests",level:4},{value:"Use Assert Library",id:"use-assert-library",level:4},{value:"Avoid Mocks",id:"avoid-mocks",level:4},{value:"Test Fixtures",id:"test-fixtures",level:4},{value:"Golden Files",id:"golden-files",level:4},{value:"Test Flags",id:"test-flags",level:4},{value:"Avoid Global State",id:"avoid-global-state",level:4},{value:"Testhelpers",id:"testhelpers",level:4},{value:"Testing as Public API",id:"testing-as-public-api",level:4},{value:"Run Tests",id:"run-tests",level:4},{value:"Testing is a Mindset",id:"testing-is-a-mindset",level:4},{value:"Notes on additional topics",id:"notes-on-additional-topics",level:3},{value:"Resources",id:"resources",level:3}];function c(e){const t={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"methodik",children:"Methodik"}),"\n",(0,n.jsx)(t.p,{children:"Recommendations. It's required you think for yourself."}),"\n",(0,n.jsx)(t.h2,{id:"testing",children:"Testing"}),"\n",(0,n.jsx)(t.p,{children:"What are your drivers that require you to test?\nAnd on which granularity do you want to test?\nAt which time do you test?\nAre you working on a prototype or a multi-team enterprise software system?"}),"\n",(0,n.jsx)(t.p,{children:"There are many reasons and goals to test for:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Correctness"}),"\n",(0,n.jsx)(t.li,{children:"Security"}),"\n",(0,n.jsx)(t.li,{children:"Performance"}),"\n",(0,n.jsx)(t.li,{children:"Degree of distribution of the system under test"}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["From Arrower's perspective, the goal of testing is to ",(0,n.jsx)(t.strong,{children:"feel confident about deploying to production"}),".",(0,n.jsx)(t.br,{}),"\n","With that here are some arrows, and you go and use them."]}),"\n",(0,n.jsx)(t.h3,{id:"methods-and-practices",children:"Methods and Practices"}),"\n",(0,n.jsx)(t.h4,{id:"use-go-testing-toolchain",children:"Use Go Testing Toolchain"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-go",children:'// run all unit tests\ngo test ./...\n\n// run all unit tests with the race detector\ngo test -race ./...\n\n// define tags to isolate long running or expensive tests\ngo test -race --tags="integration" ./...\n\n// get coverage reports\ngo test -race --tags="integration" ./... -coverprofile cover.out\ngo tool cover -html=cover.out -o cover.html; xdg-open cover.html\ngo tool cover -func cover.out | grep total:\n'})}),"\n",(0,n.jsx)(t.h4,{id:"definition-of-unit-under-test",children:"Definition of Unit Under Test"}),"\n",(0,n.jsx)(t.p,{children:"Answering this question for you will direct your efforts on where and how much to test."}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Focus on the public API over implementation details"}),"\n",(0,n.jsx)(t.li,{children:"Find the right amount of tests for the right level of the testing pyramid"}),"\n",(0,n.jsxs)(t.li,{children:["Enabled by ",(0,n.jsx)(t.a,{href:"#blackbox-testing",children:"Blackbox Testing"})]}),"\n"]}),"\n",(0,n.jsx)(t.h4,{id:"blackbox-testing",children:"Blackbox Testing"}),"\n",(0,n.jsx)(t.p,{children:"Blackbox testing prevents from testing implementation details."}),"\n",(0,n.jsxs)("table",{children:[(0,n.jsx)("thead",{children:(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",{children:"Bad"}),(0,n.jsx)("th",{children:"Good"})]})}),(0,n.jsx)("tbody",{children:(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-go",children:"package foo\n\nfunc TestNew(t *testing.T) {\n    s := New()\n\t\n    //...\n}\n"})})}),(0,n.jsx)("td",{children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-go",children:"package foo_test\n\nfunc TestNew(t *testing.T) {\n    s := foo.New()\n  \n  //...\n}\n"})})})]})})]}),"\n",(0,n.jsxs)(t.p,{children:["Use the linter ",(0,n.jsx)(t.code,{children:"testpackage"})," to ensure always testing the api as a system under test."]}),"\n",(0,n.jsxs)(t.p,{children:["Whitebox testing has its place, use it where necessary.\nE.g. when the complexity of the functions warrants it.\nThe main goal is support easy refactoring.\nConsider a naming schema for test files that use whitebox testing by adding a ",(0,n.jsx)(t.code,{children:"_wb_test.go"})," postfix."]}),"\n",(0,n.jsx)(t.h4,{id:"nest-cases-with-subtests",children:"Nest Cases With Subtests"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Name each subtest"}),"\n",(0,n.jsx)(t.li,{children:"Subtests can nest further"}),"\n",(0,n.jsx)(t.li,{children:"Subtests can share shared test preparations"}),"\n",(0,n.jsxs)(t.li,{children:["Combines with ",(0,n.jsx)(t.a,{href:"#use-go-testing-toolchain",children:"Use Go Testing Toolchain"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Target individual subtests ",(0,n.jsx)(t.br,{}),"\n",(0,n.jsx)(t.code,{children:"go test -run=TestAdd/add"})]}),"\n",(0,n.jsx)(t.li,{children:"The Go tool output lists all the run subtests"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.h4,{id:"table-driven-tests--parameterised-tests",children:"Table Driven Tests / Parameterised Tests"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Good to visually to see easily if all cases are considered"}),"\n",(0,n.jsx)(t.li,{children:"Name each subtest (self describing tests)"}),"\n",(0,n.jsx)(t.li,{children:"Setup table driven tests even for one example,\nas it will be so easy to extend.\nSetting up table driven tests later on is so hard to do it if it is not there already"}),"\n",(0,n.jsx)(t.li,{children:"In case of a regression, add a test case easily."}),"\n"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-go",children:'func TestAdd(t *testing.T) {\n    tests := map[string]struct{ a, b, res int }{\n        "add": {1, 1, 2},\n    }\n    \n    for name, tc := range tests {\n        t.Run(name, func(t *testing.T) {\n            //...\n        })\n    }\n}\n'})}),"\n",(0,n.jsx)(t.h4,{id:"use-assert-library",children:"Use Assert Library"}),"\n",(0,n.jsxs)(t.p,{children:["Don't use the got != expected pattern introduced by Go, use an assertion library, like ",(0,n.jsx)(t.code,{children:"github.com/stretchr/testify"}),"."]}),"\n",(0,n.jsx)(t.h4,{id:"avoid-mocks",children:"Avoid Mocks"}),"\n",(0,n.jsxs)(t.p,{children:["Prevent the use of mocks, as they make testing complicated and cumbersome\n\u21d2 Use in memory implementations instead, see ",(0,n.jsx)(t.a,{href:"/docs/basics/testing#unit-testing",children:"Repository helper"})," or ",(0,n.jsx)(t.a,{href:"/docs/basics/jobs#testing",children:"Queue"})]}),"\n",(0,n.jsx)(t.p,{children:"Other steps to take:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"If testing a network service, start a copy of the service locally and open a proper network connection"}),"\n",(0,n.jsxs)(t.li,{children:["Use integration tests (against ",(0,n.jsx)(t.a,{href:"/docs/basics/testing#integration-testing",children:"running docker containers"}),")"]}),"\n",(0,n.jsx)(t.li,{children:"See Subprocessing of Hashicorp"}),"\n"]}),"\n",(0,n.jsx)(t.h4,{id:"test-fixtures",children:"Test Fixtures"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Go test sets the relative path so in the tests you can access local files, e.g. in ",(0,n.jsx)(t.code,{children:"testdata/fixtures"})]}),"\n",(0,n.jsxs)(t.li,{children:["Store testdata in ",(0,n.jsx)(t.code,{children:"testdata/testdata.go"})," or ",(0,n.jsx)(t.code,{children:"./testdata_test.go"})," (should last one survive?)"]}),"\n",(0,n.jsx)(t.li,{children:"todo: templating db fixture files"}),"\n"]}),"\n",(0,n.jsx)(t.h4,{id:"golden-files",children:"Golden Files"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"For complex test output, so it can be read and worked with on its own, instead of in the test code."}),"\n",(0,n.jsxs)(t.li,{children:["Update the golden files via ",(0,n.jsx)(t.code,{children:"go test -update"})]}),"\n"]}),"\n",(0,n.jsx)(t.h4,{id:"test-flags",children:"Test Flags"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Test falgs work as flags for golden files, use them for expensive or slow tests"}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.code,{children:"go test -yourFlag"})}),"\n",(0,n.jsx)(t.li,{children:"Q: how does this compare or keep up with go build tags for e.g. integration or acceptance testing?"}),"\n"]}),"\n",(0,n.jsx)(t.h4,{id:"avoid-global-state",children:"Avoid Global State"}),"\n",(0,n.jsx)(t.h4,{id:"testhelpers",children:"Testhelpers"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Never return an error => fail the test via the t methods."}),"\n",(0,n.jsx)(t.li,{children:"Use t.Helper (or enforce by arrower linter recommendations)"}),"\n",(0,n.jsx)(t.li,{children:"Return closure for cleanup work"}),"\n",(0,n.jsx)(t.li,{children:"Fail at once functions:\ne.g. create an echo server to be proper test helpers,\nso they can fail in case of an issue (and don't have to ignore errors)"}),"\n"]}),"\n",(0,n.jsx)(t.h4,{id:"testing-as-public-api",children:"Testing as Public API"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"testing.go file or testing_*.go that is compiled with the actual program"}),"\n",(0,n.jsxs)(t.li,{children:["provide mocks, test harnesses, helpers ect. (how does this work with the testdata from above?)","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Prefix with ",(0,n.jsx)(t.code,{children:"Test"})," instead of ",(0,n.jsx)(t.code,{children:"New"})]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.li,{children:"Test all the properties of the implementation e.g. Queue (postgres vs. in memory)"}),"\n"]}),"\n",(0,n.jsx)(t.h4,{id:"run-tests",children:"Run Tests"}),"\n",(0,n.jsx)(t.p,{children:"There are ways to make testing easy.\nBut it is essential to run the tests:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"regularly"}),"\n",(0,n.jsx)(t.li,{children:"locally"}),"\n",(0,n.jsx)(t.li,{children:"automated in the pipeline"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Prevent from skipping failing tests, as this lays the ground for more behaviour like it."}),"\n",(0,n.jsx)(t.h4,{id:"testing-is-a-mindset",children:"Testing is a Mindset"}),"\n",(0,n.jsx)("img",{src:s(9266).Z,alt:"Testing is a mindset"}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.h3,{id:"notes-on-additional-topics",children:"Notes on additional topics"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"high test coverage for application and business logic"}),"\n",(0,n.jsx)(t.li,{children:"Localise your tests, to keep them easy to read and debug in case of failure (over clever function calling in other files ect... prevent mental context building)"}),"\n",(0,n.jsxs)(t.li,{children:["Unconfigurable behaviour is a point of issue for tests => make structs configurable","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"If you don't want to export: make the fields private and use whitebox testing"}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"Test bool"})," so e.g. web app can pass auth login as same person (investigate if this is really a good idea in terms of security?)"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.li,{children:"DeepEqual alternatives"}),"\n",(0,n.jsx)(t.li,{children:"TODO: create helper in tests to ensure Fields do not change unknowingly when mapping structs between layers (with golden file as reference)"}),"\n",(0,n.jsx)(t.li,{children:"Test data generation (?)"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Zim Notes on testing\nWhat to test and what not to test? e.g. controller"}),"\n",(0,n.jsx)(t.h3,{id:"resources",children:"Resources"}),"\n",(0,n.jsxs)(t.p,{children:["[1] ",(0,n.jsx)(t.a,{href:"https://www.youtube.com/watch?v=8hQG7QlcLBk",children:"https://www.youtube.com/watch?v=8hQG7QlcLBk"})," - Advanced Testing with Go by Hashimoto 2017",(0,n.jsx)(t.br,{}),"\n","[2] ",(0,n.jsx)(t.a,{href:"https://www.reddit.com/r/golang/comments/vfxs3u/beyond_hashimotos_advanced_testing_with_go/",children:"https://www.reddit.com/r/golang/comments/vfxs3u/beyond_hashimotos_advanced_testing_with_go/"})," - 2022 updates to [1]",(0,n.jsx)(t.br,{}),"\n","[3] ",(0,n.jsx)(t.a,{href:"https://quii.gitbook.io/learn-go-with-tests/",children:"https://quii.gitbook.io/learn-go-with-tests/"})," - Introduction into TDD and ideas on how to test complicated things like io or time"]})]})}function h(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},9266:(e,t,s)=>{s.d(t,{Z:()=>n});const n=s.p+"assets/images/methodik_tester-6d1e785871c3b5db6bd53bfb5782a3ae.jpg"},1151:(e,t,s)=>{s.d(t,{Z:()=>l,a:()=>r});var n=s(7294);const i={},o=n.createContext(i);function r(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);