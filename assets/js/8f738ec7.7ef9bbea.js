"use strict";(self.webpackChunkarrower_org=self.webpackChunkarrower_org||[]).push([[3551],{5335:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var s=t(5893),a=t(1151);const o={},i="Cron Alternatives",r={id:"basics/jobs/alternatives",title:"Cron Alternatives",description:"This document describes alternatives to the Scheduler interface.",source:"@site/docs/basics/05-jobs/02-alternatives.md",sourceDirName:"basics/05-jobs",slug:"/basics/jobs/alternatives",permalink:"/docs/basics/jobs/alternatives",draft:!1,unlisted:!1,editUrl:"https://github.com/go-arrower/arrower.org/tree/master/docs/basics/05-jobs/02-alternatives.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Jobs",permalink:"/docs/basics/jobs/"},next:{title:"Web Interface",permalink:"/docs/basics/jobs/ui"}},c={},l=[{value:"Scheduling with pg_cron",id:"scheduling-with-pg_cron",level:2},{value:"Postgres Image With pg_cron",id:"postgres-image-with-pg_cron",level:3},{value:"Limitations",id:"limitations",level:3},{value:"Scheduling with TimescaleDB actions",id:"scheduling-with-timescaledb-actions",level:2},{value:"Limitations",id:"limitations-1",level:3},{value:"Inserting Jobs into the Database",id:"inserting-jobs-into-the-database",level:2}];function d(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"cron-alternatives",children:"Cron Alternatives"}),"\n",(0,s.jsxs)(n.p,{children:["This document describes alternatives to the ",(0,s.jsx)(n.a,{href:"../jobs#repeating-tasks",children:"Scheduler interface"}),".\nArrower relies on jobs being scheduled by the job queue in the application.\nIf you want to run repeating tasks outside of the application this is possible."]}),"\n",(0,s.jsxs)(n.p,{children:["On the one end of the spectrum are ",(0,s.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/workloads/controllers/job/",children:"kubernetes jobs"}),"\nand on the other end are crons that run directly inside the database."]}),"\n",(0,s.jsxs)(n.p,{children:["Running a cron directly in the database can be a huge advantage,\nas it allows to execute SQL statements directly without any overhead.\nThis is ideal for maintenance work or data aggregation pipelines.\nThe drawback is that your infrastructure might not support those extensions,\nin which case you can just use Arrower's ",(0,s.jsx)(n.code,{children:"Scheduler"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"scheduling-with-pg_cron",children:"Scheduling with pg_cron"}),"\n",(0,s.jsxs)(n.p,{children:["Also consult the ",(0,s.jsx)(n.a,{href:"https://github.com/citusdata/pg_cron",children:"official documentation"})," of pg_cron."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Delete old data on Saturday at 3:30am (GMT)\nSELECT cron.schedule('30 3 * * 6', $$DELETE FROM events WHERE event_time < now() - interval '1 week'$$);\n schedule\n----------\n       42\n\n-- Vacuum every day at 10:00am (GMT)\nSELECT cron.schedule('nightly-vacuum', '0 10 * * *', 'VACUUM');\n schedule\n----------\n       43\n\n-- Change to vacuum at 3:00am (GMT)\nSELECT cron.schedule('nightly-vacuum', '0 3 * * *', 'VACUUM');\n schedule\n----------\n       43\n\n-- Stop scheduling jobs\nSELECT cron.unschedule('nightly-vacuum' );\n unschedule \n------------\n t\n\nSELECT cron.unschedule(42);\n unschedule\n------------\n          t\n\n-- Vacuum every Sunday at 4:00am (GMT) in a database other than the one pg_cron is installed in\nSELECT cron.schedule_in_database('weekly-vacuum', '0 4 * * 0', 'VACUUM', 'some_other_database');\n schedule\n----------\n       44\n\n-- Call a stored procedure every 5 seconds\nSELECT cron.schedule('process-updates', '5 seconds', 'CALL process_updates()');\n\n-- Process payroll at 12:00 of the last day of each month\nSELECT cron.schedule('process-payroll', '0 12 $ * *', 'CALL process_payroll()');\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:" \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 min (0 - 59)\n \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 hour (0 - 23)\n \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of month (1 - 31) or last day of the month ($)\n \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 month (1 - 12)\n \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of week (0 - 6) (0 to 6 are Sunday to\n \u2502 \u2502 \u2502 \u2502 \u2502                  Saturday, or use names; 7 is also Sunday)\n \u2502 \u2502 \u2502 \u2502 \u2502\n \u2502 \u2502 \u2502 \u2502 \u2502\n * * * * *\n"})}),"\n",(0,s.jsxs)(n.p,{children:["An easy way to create a cron schedule is: ",(0,s.jsx)(n.a,{href:"http://crontab.guru/",children:"crontab.guru"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"postgres-image-with-pg_cron",children:"Postgres Image With pg_cron"}),"\n",(0,s.jsxs)(n.p,{children:["You can use any (managed) database that has the pg_cron extension installed.\nAlternatively, use the docker image ",(0,s.jsx)(n.code,{children:"ghcr.io/go-arrower/postgres"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"docker pull ghcr.io/go-arrower/postgres:latest\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The image installs the extension into the default database ",(0,s.jsx)(n.code,{children:"postges"})," and makes it available to your database,\nas if it was installed there."]}),"\n",(0,s.jsx)(n.p,{children:"The image is regenerated every week, so that you might have the latest version of postgres and its base image available to you."}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"Link ADL on why this is.\nTesting and limitations of pg_cron"})}),"\n",(0,s.jsx)(n.p,{children:"If you want to use the cron from a different user or database, you might have to fine-tune your setup:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Ensure your user can access the cron schema:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Inside the database where pg_cron is installed:\n-- grant usage to regular user\nGRANT USAGE ON SCHEMA cron TO your_username;\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:["The Arrower migrations assume pg_cron is installed in the database ",(0,s.jsx)(n.code,{children:"postgres"})," if this is not the case\nupdate the database used in the migrations, see ",(0,s.jsx)(n.a,{href:"https://github.com/go-arrower/arrower/blob/master/postgres/migrations/000003_create_pg_cron_extension.up.sql",children:"create_pg_cron_extension.up.sql"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"limitations",children:"Limitations"}),"\n",(0,s.jsxs)(n.p,{children:["pg_cron can only run in one database",(0,s.jsx)(n.br,{}),"\n","=> two dbs and migrations to manage (outside of the project)",(0,s.jsx)(n.br,{}),"\n","=> see hack to make it work with fdw"]}),"\n",(0,s.jsx)(n.h2,{id:"scheduling-with-timescaledb-actions",children:"Scheduling with TimescaleDB actions"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://docs.timescale.com/api/latest/actions/",children:"https://docs.timescale.com/api/latest/actions/"})}),"\n",(0,s.jsx)(n.h3,{id:"limitations-1",children:"Limitations"}),"\n",(0,s.jsx)(n.p,{children:"Not included in the could licensing of TimescaleDB and only available in\nthe open source / self-host version."}),"\n",(0,s.jsx)(n.h2,{id:"inserting-jobs-into-the-database",children:"Inserting Jobs into the Database"}),"\n",(0,s.jsxs)(n.p,{children:["The repeating tasks introduced above rely on and execute SQL statements only.\nIn some cases this might be to limiting for your needs.",(0,s.jsx)(n.br,{}),"\n","Any valid row in the database will be executed as a job.\nSee the ",(0,s.jsx)(n.code,{children:"PersistencePayload"})," to learn more about the payload format."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"INSERT INTO arrower.gue_jobs(job_id, created_at, updated_at, run_at, queue, job_type, priority, args)\nVALUES (generate_ulid(), now(), now(), now(),\n        '', 'MyJob', 0,\n        (json_build_object(\n                 'jobData', json_object('Payload' VALUE 'your-payload')\n         ) #>> '{}')::BYTEA -- JSON can not be converted to BYTEA: convert to TEXT first via #>> Get JSON object at specified path as text\n       );\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Scheduling Complex Tasks as Jobs"})}),"\n",(0,s.jsx)(n.p,{children:"If you need to execute more complex business logic, use a cron to insert a row into the jobs table.\nThis way the jobs system is taking over,\nallowing you to perform any kind of operation without the limits of SQL."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT cron.schedule('your-custom-cron', '* * * * *',\n$$INSERT INTO arrower.gue_jobs(job_id, created_at, updated_at, run_at, queue, job_type, priority, args)\nVALUES (\ngenerate_ulid(), now(), now(), now(),\n'', 'MyJob', 0,\n(json_build_object('jobData', '{}') #>> '{}')::BYTEA);$$);\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>i});var s=t(7294);const a={},o=s.createContext(a);function i(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);