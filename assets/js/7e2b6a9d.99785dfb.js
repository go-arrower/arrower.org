"use strict";(self.webpackChunkarrower_org=self.webpackChunkarrower_org||[]).push([[1476],{483:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>T,contentTitle:()=>A,default:()=>k,frontMatter:()=>w,metadata:()=>R,toc:()=>N});var r=n(5893),o=n(1151),s=n(7294),i=n(6905),a=n(3735),l=n(6550),c=n(613),x=n(4423),d=n(636),u=n(5318);function p(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function y(e){const{values:t,children:n}=e;return(0,s.useMemo)((()=>{const e=t??function(e){return p(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:o}}=e;return{value:t,label:n,attributes:r,default:o}}))}(n);return function(e){const t=(0,d.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function h(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const r=(0,l.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,x._X)(o),(0,s.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(r.location.search);t.set(o,e),r.replace({...r.location,search:t.toString()})}),[o,r])]}function I(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,o=y(e),[i,a]=(0,s.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:o}))),[l,x]=m({queryString:n,groupId:r}),[d,p]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,o]=(0,u.Nk)(n);return[r,(0,s.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:r}),I=(()=>{const e=l??d;return h({value:e,tabValues:o})?e:null})();(0,c.Z)((()=>{I&&a(I)}),[I]);return{selectedValue:i,selectValue:(0,s.useCallback)((e=>{if(!h({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);a(e),x(e),p(e)}),[x,p,o]),tabValues:o}}var D=n(5730);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function f(e){let{className:t,block:n,selectedValue:o,selectValue:s,tabValues:l}=e;const c=[],{blockElementScrollPositionUntilNextRender:x}=(0,a.o5)(),d=e=>{const t=e.currentTarget,n=c.indexOf(t),r=l[n].value;r!==o&&(x(t),s(r))},u=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return(0,r.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t),children:l.map((e=>{let{value:t,label:n,attributes:s}=e;return(0,r.jsx)("li",{role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,ref:e=>c.push(e),onKeyDown:u,onClick:d,...s,className:(0,i.Z)("tabs__item",b.tabItem,s?.className,{"tabs__item--active":o===t}),children:n??t},t)}))})}function C(e){let{lazy:t,children:n,selectedValue:o}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===o));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return(0,r.jsx)("div",{className:"margin-top--md",children:i.map(((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==o})))})}function g(e){const t=I(e);return(0,r.jsxs)("div",{className:(0,i.Z)("tabs-container",b.tabList),children:[(0,r.jsx)(f,{...t,...e}),(0,r.jsx)(C,{...t,...e})]})}function E(e){const t=(0,D.Z)();return(0,r.jsx)(g,{...e,children:p(e.children)},String(t))}const v={tabItem:"tabItem_Ymn6"};function j(e){let{children:t,hidden:n,className:o}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,i.Z)(v.tabItem,o),hidden:n,children:t})}const w={},A="Repository",R={id:"basics/database/repository",title:"Repository",description:"Recommended Approach",source:"@site/docs/basics/03-database/01-repository.md",sourceDirName:"basics/03-database",slug:"/basics/database/repository",permalink:"/docs/basics/database/repository",draft:!1,unlisted:!1,editUrl:"https://github.com/go-arrower/arrower.org/tree/master/docs/basics/03-database/01-repository.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Database",permalink:"/docs/basics/database/"},next:{title:"Transactions",permalink:"/docs/basics/database/transactions"}},T={},N=[{value:"Recommended Approach",id:"recommended-approach",level:2},{value:"Convenience Helpers",id:"convenience-helpers",level:2},{value:"Testing",id:"testing",level:2}];function U(e){const t={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"repository",children:"Repository"}),"\n",(0,r.jsx)(t.h2,{id:"recommended-approach",children:"Recommended Approach"}),"\n",(0,r.jsx)(t.p,{children:"The repository pattern is well known and there are good resources\navailable to learn about it."}),"\n",(0,r.jsxs)(t.p,{children:["Arrower believes the repository represents actions from the domain\n=> ",(0,r.jsx)(t.code,{children:"FindByLoginName()"})]}),"\n",(0,r.jsx)(t.admonition,{type:"tip",children:(0,r.jsxs)(t.p,{children:["It is ",(0,r.jsx)(t.strong,{children:"strongly recommended"})," you implement your repositories yourself\nin whatever technology you like!"]})}),"\n",(0,r.jsx)(t.h2,{id:"convenience-helpers",children:"Convenience Helpers"}),"\n",(0,r.jsx)(t.p,{children:"If you're using the repository pattern it is cumbersome\nto always implement an in memory copy of the repository (for testing) and\nthe real one."}),"\n",(0,r.jsx)(t.p,{children:"The approach arrower is taking:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["as repository has to be implemented each time there is a helper:","\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"the following interfaces are provided as in memory and pg implementation"}),"\n",(0,r.jsx)(t.li,{children:"extend and overwrite them to fit them to your domain"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.admonition,{type:"warning",children:(0,r.jsxs)(t.p,{children:["The provided implementations are convenience helpers and\nassume you know what you're doing!",(0,r.jsx)(t.br,{}),"\n","They are not an ORM and very simplistic on purpose!"]})}),"\n",(0,r.jsx)(t.admonition,{type:"tip",children:(0,r.jsxs)(t.p,{children:["Use the Arrower provided repository only for simple CRUD\nand throwaway prototypes.",(0,r.jsx)(t.br,{}),"\n","Don't limit yourself to the methods offered out of the box and\nimplement your own custom method and behaviour as you need!",(0,r.jsx)(t.br,{}),"\n","There is nothing more powerful than a well crafted SQL query\nbehind your domain focussed repository method."]})}),"\n",(0,r.jsxs)(t.p,{children:["As simple repositories share a repeating set of methods,\nArrower offers commonly used methods ready out of the box.\nIn general, it is good practise to keep your own repository methods to a minimum.\nArrower offers a lot for your convenience, so you have a buffet to choose from,\n",(0,r.jsx)(t.strong,{children:"not"})," as a recommendation to use all of them at all times!"]}),"\n","\n",(0,r.jsxs)(E,{children:[(0,r.jsx)(j,{value:"entity",label:"Entity Repository",default:!0,children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",metastring:'title="repository.go"',children:"type Repository[E any, ID id] interface {\n    NextID(ctx context.Context) (ID, error)\n\n    Create(ctx context.Context, entity E) error\n    Read(ctx context.Context, id ID) (E, error)\n    Update(ctx context.Context, entity E) error\n    Delete(ctx context.Context, entity E) error\n\n    All(ctx context.Context) ([]E, error)\n    AllByIDs(ctx context.Context, ids []ID) ([]E, error)\n    FindAll(ctx context.Context) ([]E, error)\n    FindByID(ctx context.Context, id ID) (E, error)\n    FindByIDs(ctx context.Context, ids []ID) ([]E, error)\n    Exists(ctx context.Context, id ID) (bool, error)\n    ExistsByID(ctx context.Context, id ID) (bool, error)\n    ExistByIDs(ctx context.Context, ids []ID) (bool, error)\n    ExistAll(ctx context.Context, ids []ID) (bool, error)\n    Contains(ctx context.Context, id ID) (bool, error)\n    ContainsID(ctx context.Context, id ID) (bool, error)\n    ContainsIDs(ctx context.Context, ids []ID) (bool, error)\n    ContainsAll(ctx context.Context, ids []ID) (bool, error)\n\n    CreateAll(ctx context.Context, entities []E) error\n    Save(ctx context.Context, entity E) error\n    SaveAll(ctx context.Context, entities []E) error\n    UpdateAll(ctx context.Context, entities []E) error\n    Add(ctx context.Context, entity E) error\n    AddAll(ctx context.Context, entities []E) error\n\n    Count(ctx context.Context) (int, error)\n    Length(ctx context.Context) (int, error)\n\n    DeleteByID(ctx context.Context, id ID) error\n    DeleteByIDs(ctx context.Context, ids []ID) error\n    DeleteAll(ctx context.Context) error\n    Clear(ctx context.Context) error\n\n    AllIter(ctx context.Context) Iterator[E, ID]\n    FindAllIter(ctx context.Context) Iterator[E, ID]\n}\n"})})}),(0,r.jsx)(j,{value:"tenant",label:"Tenant Repository",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",metastring:'title="tenant.repository.go"',children:"type TenantRepository[T any, tID id, E any, eID id] interface {\n    NextID(ctx context.Context, tenantID tID) (eID, error)\n    \n    Create(ctx context.Context, tenantID tID, entity E) error\n    Read(ctx context.Context, tenantID tID, id eID) (E, error)\n    Update(ctx context.Context, tenantID tID, entity E) error\n    Delete(ctx context.Context, tenantID tID, entity E) error\n    \n    All(ctx context.Context) ([]E, error)\n    AllOfTenant(ctx context.Context, tenantID tID) ([]E, error)\n    AllByIDs(ctx context.Context, tenantID tID, ids []eID) ([]E, error)\n    FindAll(ctx context.Context) ([]E, error)\n    FindAllOfTenant(ctx context.Context, tenantID tID) ([]E, error)\n    FindByID(ctx context.Context, tenantID tID, id eID) (E, error)\n    FindByIDs(ctx context.Context, tenantID tID, ids []eID) ([]E, error)\n    Exists(ctx context.Context, tenantID tID, id eID) (bool, error)\n    ExistsByID(ctx context.Context, tenantID tID, id eID) (bool, error)\n    ExistByIDs(ctx context.Context, tenantID tID, ids []eID) (bool, error)\n    ExistAll(ctx context.Context, tenantID tID, ids []eID) (bool, error)\n    Contains(ctx context.Context, tenantID tID, id eID) (bool, error)\n    ContainsID(ctx context.Context, tenantID tID, id eID) (bool, error)\n    ContainsIDs(ctx context.Context, tenantID tID, ids []eID) (bool, error)\n    ContainsAll(ctx context.Context, tenantID tID, ids []eID) (bool, error)\n    \n    Save(ctx context.Context, tenantID tID, entity E) error\n    SaveAll(ctx context.Context, tenantID tID, entities []E) error\n    UpdateAll(ctx context.Context, tenantID tID, entities []E) error\n    Add(ctx context.Context, tenantID tID, entity E) error\n    AddAll(ctx context.Context, tenantID tID, entities []E) error\n    \n    Count(ctx context.Context) (int, error)\n    CountOfTenant(ctx context.Context, tenantID tID) (int, error)\n    Length(ctx context.Context) (int, error)\n    LengthOfTenant(ctx context.Context, tenantID tID) (int, error)\n    Empty(ctx context.Context) (bool, error)\n    EmptyTenant(ctx context.Context, tenantID tID) (bool, error)\n    IsEmpty(ctx context.Context) (bool, error)\n    IsEmptyTenant(ctx context.Context, tenantID tID) (bool, error)\n    \n    DeleteByID(ctx context.Context, tenantID tID, id eID) error\n    DeleteByIDs(ctx context.Context, tenantID tID, ids []eID) error\n    DeleteAll(ctx context.Context) error\n    DeleteAllOfTenant(ctx context.Context, tenantID tID) error\n    Clear(ctx context.Context) error\n    ClearTenant(ctx context.Context, tenantID tID) error\n}\n"})})})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:"var repo YourRepositoryType = repository.NewMemoryRepository[Entity, EntityID]()\n"})}),"\n",(0,r.jsxs)(t.p,{children:["It is implicitly assumed that the entity has a field named ",(0,r.jsx)(t.code,{children:"ID"})," with an underlying type of ",(0,r.jsx)(t.code,{children:"string"})," or ",(0,r.jsx)(t.code,{children:"int"}),".\nThat field will be used as the primary key.\nYou can change the field name:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:'repo := repository.NewMemoryRepository[E, I](\n\trepository.WithIDField("YourPKField"),\n)\n'})}),"\n",(0,r.jsxs)(t.p,{children:["The repository will probably not match all your needs, see how to\n",(0,r.jsx)(t.a,{href:"https://github.com/go-arrower/arrower/blob/master/repository/inmemory.example_extend_test.go",children:"extend"})," and\n",(0,r.jsx)(t.a,{href:"https://github.com/go-arrower/arrower/blob/master/repository/inmemory.example_overwrite_test.go",children:"overwrite or fine tune"}),"\nit, so it fits all your applications needs."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",metastring:'title="Direct use of generic repository"',children:"// define the repository in the domain \ntype UserRepository interface {\n    Save(ctx context.Context, user User) error\n    FindByID(ctx context.Context, id UserID) (User, error)\n    Delete(ctx context.Context, user User) error\n}\n\n// usage in your application\nvar repo UserRepository = repository.NewMemoryRepository[User, UserID](),\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",metastring:'title="Wrap the generic repository"',children:"// define the repository in the domain \ntype UserRepository interface {\n    Save(ctx context.Context, user User) error\n    FindByID(ctx context.Context, id UserID) (User, error)\n    Delete(ctx context.Context, user User) error\n}\n\n// implement the repository in the interfaces layer\nfunc NewInMemoryUserRepository() *InMemoryUserRepository {\n    return &InMemoryUserRepository{\n        MemoryRepository: repository.NewMemoryRepository[User, UserID](),\n    }\n}\n\nvar _ UserRepository = (*InMemoryUserRepository)(nil)\n\ntype InMemoryUserRepository struct {\n    *repository.MemoryRepository[User, UserID]\n}\n\n// usage in your application\nvar repo UserRepository = NewInMemoryUserRepository()\n"})}),"\n",(0,r.jsx)(t.h2,{id:"testing",children:"Testing"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Classical way"}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:'repo := repository.NewMemoryRepository[testdata.Entity, testdata.EntityID]()\nc, _ := repo.Count(ctx)\nassert.Equal(t, 0, c, "repo should be empty")\n'})}),"\n",(0,r.jsxs)(t.ol,{start:"2",children:["\n",(0,r.jsx)(t.li,{children:"Build in assertions in the default repository"}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:"repo := repository.Test[testdata.Entity, testdata.EntityID](t)\nrepo.Empty()\n"})}),"\n",(0,r.jsxs)(t.ol,{start:"3",children:["\n",(0,r.jsx)(t.li,{children:"Assertion helper for any / custom repositories"}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:"repo := NewMyCustomRepository[Entity, EntityID]()\nrassert := repository.TestAssert[Entity, EntityID](t, repo)\nrassert.Empty()\n"})}),"\n",(0,r.jsxs)(t.ol,{start:"4",children:["\n",(0,r.jsx)(t.li,{children:"Embed assertions into custom repository"}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:"repo := NewMyCustomTestRepository(t)\nrepo.Emtpy()\n\nfunc NewMyCustomTestRepository(t *testing.T) *MyCustomRepository {\n    repo := repository.NewMemoryRepository[Entity, EntityID]()\n    return &MyCustomRepository{\n        MemoryRepository: repo,\n        TestAssertions:   repository.TestAssert(t, repo),\n    }\n}\n\ntype MyCustomRepository struct {\n    *repository.MemoryRepository[Entity, EntityID]\n    *repository.TestAssertions[Entity, EntityID]\n}\n"})})]})}function k(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(U,{...e})}):U(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>i});var r=n(7294);const o={},s=r.createContext(o);function i(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);